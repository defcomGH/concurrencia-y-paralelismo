1. Un sistema operativo mantiene 5 instancias de un recurso almacenadas en una cola, cuando un proceso necesita usar una instancia del recurso la saca de la cola, la usa y cuando termina de usarla la vuelve a depositar. 

cola C;
sem mutex = 1, recursos = 5
process Proceso [i=1..N]{ 
	P(recursos)
	P(mutex)
	cola.pop()
	V(mutex)
	//Uso el recurso del pop
	P(mutex)
	cola.push()
	V(mutex)
	V(recursos) //dejo mi lugar 
}


	sem sc = 1, espera[N] = ([N]0);
	cola<recurso> rec;
	cola<int> esperando;
	
	Process p[id:0..N-1]{
		P(sc);
		if (rec.vacío()){ //if (not libre) libera y espera
			esperando.agregar(id);
			V(sc);
			P(espera[id]);
		}
		recurso r = rec.sacar(); //adquiere un recurso
		V(sc); //SIGNAL1
		//usa el recurso
		P(sc);
		rec.agregar(r);//libera el recurso
		if (not esperando.vacío()) { //SIGNAL2
			int aux = esperando.sacar();
V(espera[aux]);
		} else {
			V(sc);
		}
	}

2. A una cerealera van T camiones a descargarse trigo y M camiones a descargar maíz. Sólo hay
lugar para que 7 camiones a la vez descarguen pero no pueden ser más de 5 del mismo tipo
de cereal. Nota: sólo se pueden usar procesos que representen a los camiones.

sem lugar = 7, maxMaiz = 5, maxTrigo = 5;

process CamionTrigo [i=1 to N] {
	P(maxTrigo)
	P(lugar)
	DescargoTrigo();
	V(lugar)
	V(maxTrigo)
}

process CamionMaiz [j=1 to N] {
	P(maxMaiz)
	P(lugar)
	DescargoMaiz()
	V(lugar)
	V(maxMaiz)
}

3. Se tiene un curso con 40 alumnos, la maestra entrega una tarea distinta a cada alumno, luego cada alumno realiza su tarea y se la entrega a la maestra para que la corrija, esta revisa la tarea y si está bien le avisa al alumno que puede irse, si la tarea está mal le indica los errores, el alumno corregirá esos errores y volverá a entregarle la tarea a la maestra para que realice la corrección nuevamente, esto se repite hasta que la tarea no tenga errores.

	sem tarea[40] = ([40]0), corregir = 0, sc = 1;
	bool[40] listo = ([40],false);
	cola<int> espCorrección;

	Process alumno[id:0..39]{
		P(tarea[id]);
		//hacer la tarea
while (not listo[id]){
			//V(entrega[id]);
P(sc);
			espCorreccion.agregar(id);
			V(sc);
			V(corregir);
			P(tarea[id]);
		}
	}
	Process maestra{
		for (int i = 0; i < 40; i++){
			//  dar tarea al alumno i
			V(tarea[i]);
		}
		int l = 0;
		while (l < 40){
			P(corregir);
			P(sc);
			int aux = espCorrección.sacar();
			V(sc);
			//corregir
			If (hay errores) {
				//indica errores
				V(tarea[aux]);
			} else {
				listo[aux] = true;
				V(tarea[aux]);
				l++;
			}
		}
	}




process alumno [id:0..39]
{ 
	P(semAl[id])
		{
			realizo(tarea[id])
			P(mutexC)
			agrego(C,id)
			V(mutexC)
			V(pidoCorr)
			P(semAl[id])
		}
		until (correcto[i])

process profesora
{
	int i, corr = 0
	for (i=0; i<40; i++)
		{
			tarea[i]=tareaAlumno(i);
			V(semAl[i])

			}
	while(corr<40)
		{
			P(pidoCorr);
			P(mutexC);
			idT = quitar(C)
			V(mutexC)
			corrijo(tarea[idT], correcto[idT]);
			V(semAl[idT]);
			corr = corr + correcto[idT];
}
}
	


4. Existen N personas que deben fotocopiar un documento cada una. Resolver cada ítem usando semáforos:

a) Implemente una solución suponiendo que existe una única fotocopiadora compartida por todas las personas, y las mismas la deben usar de a una persona a la vez, sin importar el orden. Existe una función Fotocopiar() llamada por la persona que simula el uso de la fotocopiadora. Sólo se deben usar los procesos que representan a las Personas.

b) Modifique la solución de (a) para el caso en que se deba respetar el orden de llegada.

c) Modifique la solución de (b) para el caso en que se deba dar prioridad de acuerdo a la edad de cada persona (cuando la  fotocopiadora está libre la debe usar la persona de mayor edad entre las que estén esperando para usarla).

d) Modifique la solución de (a) para el caso en que se deba respetar estrictamente el orden dado por el identificador del proceso (la persona X no puede usar la fotocopiadora hasta que no haya terminado de usarla la persona X-1).

e) Modifique la solución de (b) para el caso en que además haya un Empleado que le indica a cada persona cuando debe usar la fotocopiadora.

f) Modificar la solución (e) para el caso en que sean 10 fotocopiadoras. El empleado le indica a la persona cuando puede usar una fotocopiadora, y cual debe usar.


a)
sem mutex = 1;

process persona[id=1..N] {
	P(mutex);
	Fotocopiar();
	V(mutex);
}

b)
sem sc = 1, pe[N] = ([N]0);
	Bool libre = true;
	cola<int> espera;
	
	Process persona[id:0..N-1]{
		P(sc);
		if (not libre){
			espera.agregar(id);
			V(sc);
			P(pe[id]);
		} else {
			libre = false;

		}
		
V(sc);
Fotocopiar();
P(sc);
if (not espera.empty()) {
	V(pe[espera.sacar()]);
} else {
	libre = true;
			V(sc);
		}
	}

c)
sem sc = 1, pe[N] = ([N]0);
	Bool libre = true;
	colaOrdenada<int> espera;
	
	Process persona[id:0..N-1]{
		P(sc);
		if (not libre){
			espera.agregar(id,edad);
			V(sc);
			P(pe[id]);
		} else {
			libre = false;

		}
		
V(sc);
Fotocopiar();
P(sc);
if (not espera.empty()) {
	V(pe[espera.sacar()]);
} else {
	libre = true;
			V(sc);
		}
	}



d) Modifique la solución de (a) para el caso en que se deba respetar estrictamente el orden 
dado por el identificador del proceso (la persona X no puede usar la fotocopiadora hasta 
que no haya terminado de usarla la persona X-1).



fotocopiadora;
sem turno[n] 0 = 1, 1..n-1 = 0;//evitar esta inicializacion


process persona[id: 0..n-1]

{
	if (id == 0) V(turno[0]);
	P(turno[id]);
	//fotocopiar
	if (id < n-1) V(turno[id + 1];
}


e)
	sem sc = 1, pe[N] = ([N]0), listo = 0, e = 0;
	cola<int> espera;
	
	Process persona[id:0..N-1]{
		P(sc);
		espera.agregar(id);
		V(sc);
		V(e);
		P(pe[id]);
Fotocopiar();
V(listo);
	}

	Process empleado{
		for (int i = 0; i < N; i++){
			P(e);
			P(sc);
			V(pe[espera.sacar()];
			V(sc);
			P(listo);
		}
	}

f)
	sem sc = 1, pe[N] = ([N]0), e = 0, libre = 10;
	cola<int> espera;
	int[N] numImp;
	bool[10] impLibre = ([10]true);
	
	Process persona[id:0..N-1]{
		P(sc);
		espera.agregar(id);
		V(sc);
		V(e);
		P(pe[id]);
Fotocopiar(numImp[id]);
impLibre[numImp[id]] = true;
V(libre);
	}

	Process empleado{
		for (int i = 0; i < N; i++){
			P(e);
			P(libre);
			P(sc);
			int aux espera.sacar();
			V(sc);
for (int j = 0; j < 10; j++) {
				if (impLibre[j]) {
					numImp[aux] = j;
					impLibre[j] = false;
					break; 
				}
			}
			V(pe[aux]);
		}
	}

5. Se debe simular una maratón con C corredores donde en la llegada hay UNA máquina expendedora de agua con capacidad para 20 botellas. Además existe un repositor encargado de reponer las botellas de la máquina. Cuando los C corredores han llegado al inicio comienza la carrera. Cuando un corredor termina la carrera se dirigen a la máquina expendedora, espera su turno (respetando el orden de llegada), saca una botella y se retira. Si encuentra la máquina sin botellas, le avisa al repositor para que cargue nuevamente la máquina con 20 botellas; espera a que se haga la recarga; saca una botella y se retira. Nota: maximizar la concurrencia; mientras se reponen las botellas se debe permitir que otros corredores se encolen. 
	sem sc = 1, inicio = 0, corredor[C] = ([C]0), rep = 0, carga = 0;
	int cant = 0, bebidas = 20;
	bool libre = true;
	
	
Process corredor[id:0..C-1]{
		P(sc);
		cant++;
		if (cant == C)
			for (int i = 0; i < C; i++)
V(inicio); //cualquier cosa
V(sc);
		P(inicio);
		//carrera
		P(sc);
		if (not libre) {
			esperando.agregar(id);
			V(sc);
			P(corredor[id]);
		} else {
			libre = false;
			V(sc);
}
if (bebidas == 0){
	V(rep);
	P(carga);
}
bebidas--;
P(sc);
if (not esperando.empty()){
	V(corredor[esperando.sacar()]);
} else {
	libre = true;
	}
V(sc);
//me retiro;
}
Process repositor{
	i = 20;
	while (i < C){
		P(rep);
		bebidas += 20;
		V(carga);
		i += 20;
	}
}


sem mutex=1, inicio=0, listo=0, esperando[C] ([C]0);
int cant=0, bebidas=20;
boolean ocupada = false;
cola Cola
process corredor [id: 1..C]
{
	P(mutex)
	cant++;
	if (cant==C){
		V(mutex)
		for (i= 1 to C-1)
			V(inicio)
} 	else
		V(mutex)
		P(inicio)
}
//corroCarrera
	P(mutex)
	if (ocupada) {
		push(Cola, id)
		V(mutex)
		P(esperando[id])
}
	else {
		ocupada=true
		V(mutex)	
}
	if (bebidas == 0) {
		V(repositor)
		P(listo)
}
bebidas = bebidas - 1;
P(mutex)
if (not empty(Cola)){
	pop(Cola, siguiente)
	V(mutex)
	V(esperando[siguiente]) }
else (
	ocupada = false;
	V(mutex);
}
process repositor {
	while (true) {
		P(repositor)
		bebidas = 20;
		V(listo)
}

}


6. Una empresa de turismo posee 4 combis con capacidad para 25 personas cada una y UN vendedor que vende los pasajes a los clientes de acuerdo al orden de llegada. Hay C clientes que al llegar intentan comprar un pasaje para una combi en particular (el cliente conoce este dato); si aún hay lugar en la combi seleccionada se le da el pasaje y se dirige hacia la combi; en caso contrario se retira. Cada combi espera a que suban los 25 pasajeros, luego realiza el viaje, y cuando llega al destino deja bajar a todos los pasajeros. Nota: maximizar la concurrencia; suponga que para cada combi al menos 25 clientes intentarán comprar pasaje.


cola c;
sem cantCola=0;
int v[4] = {25,25,25,25};
int capacidadCombi[4] = {25,25,25,25};
sem semaforoVector[4] = {1,1,1,1}
sem clientes[1 to c] = 0;   // el cliente debe quedarse esperando
boolean entrada[1 to c]= false;
sem x = 1;
sem combillenap[4] = {0,0,0,0}
lista list (integers);
list pasajerosPorCombi[4];

process combi [i: 1 to 4] {
	p(combiLlena[i]);
	viaje();
	auxList = list[nrocombi];
	for 1 to 25 {
		v(auxList.Next());
	}

}

process vendedor {
cliente
	while(true){
			p(cantCola);		
			p(sc);
			cliente=pop(id,nroCombi);
			v(sc);
			if(v[nroCombi] != 0){
				v[nroCombi]--;
				entrada[id] = true;
			}
			v(clientes[id]);
	}
}



process clientes [1 to c] {
	p(sc);
	push(id,nroCombi);
	v(sc);
v(cantCola);
	p(clientes[id]);
	if(entrada[id]){
		//ir a la combi
		P(semaforoVector[nroCombi]);
		capacidadCombi[nroCombi]--;
		pasajerosPorCombi[cliente.nrocombi].agregarAdelante(id);
		if(capacidadCombi[nroCombi]=0){
			v(combillena[nroCombi]);
		}
		V(semaforoVector[nroCombi]);
		p(clientes[id])
		//bajar de la combi
	}
	else
	{
		//irse 
	}
}


7. En una herrería hay 15 empleados que forman 5 grupos de 3 personas; los grupos se forman de acuerdo al orden de llegada (los 3 primeros pertenecen al grupo 1, los 3 siguientes al grupo 2, y así sucesivamente). Ni bien conoce el grupo al que pertenece el empleado comienza a trabajar (no debe esperar al resto de grupo para comenzar). Cada grupo debe hacer exactamente P unidades de un producto (cada unidad es hecha por un único empleado). Al terminar de hacer las P unidades de un grupo, sus 3 empleados se retiran. Nota: maximizar la concurrencia; ningún grupo puede hacer unidades de más.


int contadorUnidades[5]= {0,0,0,0,0}    
 sem s1[5]={1,1,1,1,1}
int contadorEmpleados=0;    
  sem s2=1;
int contadorGrupos=0;

process empleado [1..15]{
int grupo;

	p(s2);
	grupo= contadorGrupo;
	contadorEmpleado++;
	if(contadorEmpleado=3) {
		contadorEmpleado=0;
		contadorGrupo++;
	}
	v(s2);

	P(s1[grupo]);
	while(contadorUnidades[grupo] < (p)){
		contadorUnidades[grupo]++;
		V(s1[grupo]);

		//hacerUnidadDeTrabajo
		P(s1[grupo]);
	}
	V(s1[grupo]);

}

cola C;
sem mutexL=1;
bool libre=true;
sem esperar[15] = ([15] 0);
sem mutexG[5] = ([5] 1);
sem fin[5] = ([5] 0);
int cant, productos[5] = ([5] 0), listos[5] = ([5] 0);

process Emp[id:1..15]{
	int grupo;
	
	P(mutexL)
	if (libre) {
		libre=false;
		V(mutexL)
	else {
		push(C,id)
		V(mutexL)
		P(esperar[id])
}
	grupo = cant/3 + 1;
	cant--;
	P(mutexL)
	if (not empty(C)) {
		pop(C,sig);
		V(esperar[sig]);
}
	else libre = true;
V(mutexL)
P(mutexG[grupo])
while (productos[grupo]<P) {
	productos[grupo]++;
	V(mutexG[grupo])
	//Producto
	P(mutexG[g]);
}
listos[grupo]++;
if (listos[grupo] == 3)
	for [i=1 to 3] 
		V(fin[grupo]);
V(mutexG[grupo]);
P(fin[grupo])
// me voy
}
	
	
